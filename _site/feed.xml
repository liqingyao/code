<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Li Qingyao</title>
    <description>Hello World</description>
    <link>http://code.liqingyao.com/</link>
    <atom:link href="http://code.liqingyao.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 Nov 2015 12:36:17 +0800</pubDate>
    <lastBuildDate>Tue, 24 Nov 2015 12:36:17 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>搭建工作环境</title>
        <description>&lt;p&gt;十月中旬校招结束，确定了一桩大事后，放慢了拼命赶路的脚步，列了很多 TODO list，不过还得先从打造一个顺手的工作平台和学习环境开始。
所谓工欲善其事，必先利其器 &amp;amp; 磨刀不误砍柴工。虽然这些都成了不写论文的借口，但经历了一个多月的打磨，总算初见规模。尽管望尘莫及牛人的体系方法，好歹也是迈出了第一步。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;&lt;strong&gt;同步系统&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 重要资料同步 - &lt;a href=&quot;https://www.dropbox.com/&quot;&gt;Dropbox&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;重要资料的定义：钻研多年的学术成果、源代码；记录每一阶段的文档、文件等重要等级高的内容。&lt;/p&gt;

&lt;p&gt;dropbox 是非常好的同步平台：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;安全可靠&lt;/strong&gt; - 不用怕哪天突然被告知数据清空&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;同步速度快&lt;/strong&gt; - 对修改的文件上传增量部分而不是重传整个文件，在大文件上进行小修改的性能超过许多同质产品&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外两个特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;需要翻墙&lt;/strong&gt; - 每次要同步时要需要翻墙&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;容量限制&lt;/strong&gt; - 普通用户初始 2G 空间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修改重要文件时一般在电脑前，所以我在 Mac 和 Windows 上装了客户端，其他情况可以直接通过 Web 版访问。Dropbox 的使用习惯比较容易养成，就此摆脱了用 U 盘颠来倒去的无谓折腾。&lt;/p&gt;

&lt;p&gt;Tips：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;刷容量&lt;/strong&gt; - 拜托好友帮个忙呗！~&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;共享文件夹&lt;/strong&gt; - 利用好共享文件夹，省去通过邮件或者 QQ 频繁互传文件的烦恼，据说还有异地情侣用共享文件夹来传情呢~&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他奇巧淫技：&lt;a href=&quot;http://www.zhihu.com/question/20104959&quot;&gt;看看其他大神怎么把 Dropbox 用彻底&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 大文件、非重要资料同步 - 百度云盘&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;百度云盘的特征正好和 Dropbox 互补，墙内人民不需要翻墙、容量无限制（尽管有一次性传输大小限制），但安全性和同步速度略逊色。那么正好用它的特点来保存一些重要等级低但经常需要同步访问的内容，比如软件、音视图；或者用作于文件共享。&lt;/p&gt;

&lt;p&gt;资料的同步，尤其是用 Dropbox 时，我认为它并不是资料的最终宿主，当一个阶段结束后，比如项目交付了、毕业了，这些资料处于静止状态不会修改时，存到硬盘归档，给新文件腾出空间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 代码同步 + 托管 - Git&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于个人代码的同步必须 Git 啊，话不多说，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;公开的代码&lt;/strong&gt; - Github&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;私有的代码&lt;/strong&gt; - BitBucket&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;&lt;strong&gt;笔记系统&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;如何记笔记，一个看似简单的问题。其实是时间安排、记录、整合、运用等等能力的总和，说白了就是如何学习，而学习的习惯贯穿职业生涯、伴随一生。之前我是豪放派，想到就写，要记录就随手拿一张 A4 纸，东一榔头西一棒子，很多草稿都留着，看着乱也没什么大用，扔了又舍不得，总之剪不断理还乱。而好的习惯就能把零碎的知识点串联起来，转换成自己知识体系的一部分。因此在这变与不变之际，痛下决心纠正好。&lt;/p&gt;

&lt;p&gt;首先来看看牛人们都是怎么说的：&lt;a href=&quot;http://www.zhihu.com/question/23427617/answer/28206585&quot;&gt;如何构建自己的笔记系统？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 任务派发&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;有明确的学习目标 - &lt;a href=&quot;http://www.xmindchina.net/&quot;&gt;XMind&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;每个阶段都应该都一个中等规模的学习目标，掌握某项专业技能、学习一个新的领域等等，不以职业生涯的改变而改变的学习计划。这种学习方式第一步可以利用 XMind 建立思维导图，明确知识脉络。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;项目驱动 - &lt;a href=&quot;https://trello.com/&quot;&gt;Trello&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;项目驱动任务的特征是一上手可能没有非常清晰的脉络，可能涉及到许多未知的知识点，需要在行进中学习；或者项目提出的任务比较分散；在跟进中遇到许多突发问题等，同时也常常是工作中接受任务时的情况。可以参考下图 GCD 模型 (Get Things Done Model) 来管理任务清单，对应的软件有许多，包括 doit.im 等等。我选择了知乎中提到的 Trello，简单直接。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://code.liqingyao.com/images/GTDcanonical.png&quot; alt=&quot;GTDcanonical&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. 资料收集 - Pocket / 收藏夹 / Evernote&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;网页看了还没整理的 -&amp;gt; 收藏夹&lt;/li&gt;
  &lt;li&gt;网页愈看未看的 -&amp;gt; Pocket&lt;/li&gt;
  &lt;li&gt;收藏夹和 Pocket 里的 -&amp;gt; Evernote Inbox&lt;/li&gt;
  &lt;li&gt;突发奇想的 -&amp;gt; Evernote Inbox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;资料来源五花八门，看上去比较杂，但最后各路小溪都汇聚到印象笔记的 Inbox 里，等待再一次消化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 整理整合 - Evernote&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每周一整理，Inbox 里零碎的片段分门别类放到笔记本中&lt;/li&gt;
  &lt;li&gt;每月一整合，归并、整合笔记本中的笔记&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. 归档&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;经过了三次消化，笔记中的内容已经成为自己的囊中之物。和文件系统最终的归档一样，知识要经过归档才能形成更有价值的内容，以博客或社区回答的形式共享出去，授人以渔的同时自己会收获更多。&lt;/p&gt;

&lt;p&gt;好了，说了那么多，实践和坚持最重要!&lt;/p&gt;

&lt;!-- ### 工具箱

磨刀还需磨刀棒，实用小工具不光用得顺手，干活效率那也是杠杠的。

- Beyond Compare

  两年前从导师那里知道的文件比对工具，代码比较、二进制文件比较、文件同步，谁用谁知道，简直是神器。

- Atom

- Markdown

- 快捷键

- 键盘 --&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 23:34:32 +0800</pubDate>
        <link>http://code.liqingyao.com/build-working-environment/</link>
        <guid isPermaLink="true">http://code.liqingyao.com/build-working-environment/</guid>
        
        
        <category>其他</category>
        
      </item>
    
      <item>
        <title>Windows下安装与使用GCC编译器</title>
        <description>&lt;h3 id=&quot;gcc&quot;&gt;&lt;strong&gt;什么是GCC?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;我们在Windows系统下习惯使用诸如Windows Visual Stdio图形化IDE工具来编辑和编译代码，但在Unix/Linux系统下如何编译C++代码呢？答案是GCC(GUN Compiler Collection)。GCC源于一场自由软件计划，最初只能在不同操作系统上处理C语言，经过快速扩张后目前也支持C++/Objective-C/Java/Ada/Pascal/Fortran等多种语言的编译。&lt;/p&gt;

&lt;h3 id=&quot;gcc-1&quot;&gt;&lt;strong&gt;安装GCC&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;下载安装MinGW
MinGW(Minimalist GNU on Windows)是Windows系统下GNU工具套装，使用MinGW来安装GCC。
&lt;a href=&quot;http://sourceforge.net/projects/mingw/files/&quot;&gt;点击下载&lt;/a&gt;，并安装到C盘根目录。&lt;/li&gt;
  &lt;li&gt;配置Windows环境变量
找到环境变量：控制面板-&amp;gt;系统-&amp;gt;高级系统设置-&amp;gt;高级-&amp;gt;环境变量；
在系统变量中选择&lt;code&gt;Path&lt;/code&gt;，并在变量值中添加&lt;code&gt;C:\MinGW\bin&lt;/code&gt;
在系统变量中新建&lt;code&gt;LIBRARY_PATH&lt;/code&gt;，变量值是&lt;code&gt;C:\MinGW\lib&lt;/code&gt;
在系统变量中新建&lt;code&gt;C_INCLUDE_PATH&lt;/code&gt;，变量值是&lt;code&gt;C:\MinGW\include&lt;/code&gt;
以上操作分别配置了标准库和头文件的存放路径。&lt;/li&gt;
  &lt;li&gt;使用MinGW安装GCC
运行MinGW,在Basic Setup中选择mingw32-gcc-g++
选择Installation-&amp;gt;Apply Changes
等待GCC相关环境安装完毕。&lt;/li&gt;
  &lt;li&gt;以上步骤完成后，在cmd敲入命令
&lt;code&gt;gcc --version&lt;/code&gt;
如果安装成功，会显示gcc版本号。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;gcc-2&quot;&gt;&lt;strong&gt;使用GCC&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;创建GCC工作目录
&lt;code&gt;mkdir CPP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;前往工作目录
&lt;code&gt;cd CPP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;选择一种文本编辑器（比如Windows自带的notepad）
&lt;code&gt;notepad main.c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在自动弹出的文本编辑器中敲测试代码，保存&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stdlib.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- &lt;pre class=&quot;theme:github width-set:true width:450 lang:default decode:true &quot; &gt;include &amp;lt;stdio.h&amp;gt;
include &amp;lt;stdlib.h&amp;gt;
int main() {
    printf(&quot;Hello World\n&quot;);
    return(0);
}&lt;/pre&gt; --&gt;

&lt;ol&gt;
  &lt;li&gt;使用GCC编译main.c，输出HelloWorld可执行文件
&lt;code&gt;gcc main.c -o HelloWorld&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;此时会报错“缺少libgcc_s_sjlj-1.dll文件”
&lt;a href=&quot;http://www.dll-files.com/dllindex/dll-files.shtml?libgcc_s_sjlj-1&quot;&gt;点击下载&lt;/a&gt;32-bit版本，解压并放到C:\Windows\SysWOW64中&lt;/li&gt;
  &lt;li&gt;重复步骤5，正常运行，此时可以看到工作目录下生成了HelloWorld.exe文件。最后在cmd中运行文件
&lt;code&gt;HelloWorld.exe&lt;/code&gt;
终于看到第一个测试输出“HelloWorld”，大功告成！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[参考资料]&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;http://www.wikihow.com/Compile-a-C-Program-Using-the-GNU-Compiler-(GCC)&lt;/li&gt;
	&lt;li&gt;http://blog.csdn.net/firefoxbug/article/details/6724876&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 22 Apr 2015 18:21:32 +0800</pubDate>
        <link>http://code.liqingyao.com/windows-install-gcc/</link>
        <guid isPermaLink="true">http://code.liqingyao.com/windows-install-gcc/</guid>
        
        
        <category>其他</category>
        
      </item>
    
      <item>
        <title>如何成为更好的 iOS 开发者</title>
        <description>&lt;p&gt;在 Boss 的敦促和项目进度的高压下猛学了两个多月 iOS 开发，从 Objective-C 小白到上线第一个应用，再到反思技术改进应用。从始至终都是自学，回头看看确实走了不少弯路。在这做些小总结，也希望能给读者带来些许帮助。&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;零基础自学方法论：先概览后细节，先容易后复杂。参考资料和步骤如下：&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&quot;http://rypress.com/tutorials/objective-c/index.html&quot;&gt;Ry’s Objective-C Tutorial&lt;/a&gt; （图形化教学，深入浅出）&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://v.163.com/special/opencourse/iphonekaifa.html&quot;&gt;iPhone 开发公开课：CS193P&lt;/a&gt; （高富帅轮番上阵，不学也难）&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.raywenderlich.com/&quot;&gt;Ray Wenderlich Tutorial&lt;/a&gt; 或者 &lt;a href=&quot;http://www.techotopia.com/index.php/Image:Ios_7_app_development_essentials.png&quot;&gt;Techotopia Tutorial&lt;/a&gt;  或者 &lt;a href=&quot;http://www.appcoda.com/tutorials/&quot;&gt;AppCoda Tutorial&lt;/a&gt;（入门基础控件/TableView/ViewController 等用法的好教程，丰富的示例，三者可以结合使用）&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/navigation/&quot;&gt;iOS Developer Library&lt;/a&gt;（万能的百科全书，初学者最好有以上基础后再参考）&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/&quot;&gt;StackOverflow&lt;/a&gt;（高质量论坛，或者直接 google 搜索关键词：[problem] + ios / [problem] + iPhone SDK 找 StackOverflow 的链接）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我就是按照以上思路来自学的。接下来需要掌握以下：&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.raywenderlich.com/46988/ios-design-patterns&quot;&gt;iOS Design Pattern&lt;/a&gt;（Cocoa 核心架构：MVC）&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://www.codefellows.org/blog/everything-a-competent-ios-developer-needs-to-know&quot;&gt;Everything a Competent iOS Developer Needs to Know&lt;/a&gt;（iOS 开发树形结构）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一条是 iOS App 架构指南针，深入理解 Design Pattern 是写出结构清晰、维护方便、可重用性高的代码的核心，也是每一个 iOS 开发者必须知道的事。&lt;/p&gt;

&lt;p&gt;第二条的 iOS 树形图囊括了一个高素质 iOS 开发者需要必备的知识储备。&lt;/p&gt;

&lt;p&gt;当你对以上都了然于心，也有了一些实战经验后，比如开发过一两个完整的 App，是不是觉得代码的堆砌造成很难维护和修改，想学更多又不知从何下手。我现在也正经历这个阶段。我找了一些方法，与君共勉。&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;阅读大量高质量开源代码（from Github），也让他人来阅读你的代码&lt;/li&gt;
	&lt;li&gt;宁愿多花时间来思考架构和模块的规划，也不要立刻埋头码字&lt;/li&gt;
	&lt;li&gt;为代码写注释，组织好代码结构&lt;/li&gt;
	&lt;li&gt;不断的练习（Do you know the rule of 10,000? It says that if you want to be world-class in any field you have to invest 10,000 hours in total.）&lt;/li&gt;
	&lt;li&gt;阅读 iOS 牛人博客，关注苹果发布会等新动态，同时关心一切互联网、科技新闻，保持一颗年轻的心。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[参考资料]&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;http://www.wikihow.com/Improve-your-Skills-as-a-Programmer&lt;/li&gt;
	&lt;li&gt;http://www.appdesignvault.com/betterdeveloper/&lt;/li&gt;
	&lt;li&gt;http://www.cocoanetics.com/2010/07/how-to-become-great-at-ios-development/&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 14 Nov 2014 02:56:32 +0800</pubDate>
        <link>http://code.liqingyao.com/how-to-become-better-ios-developer/</link>
        <guid isPermaLink="true">http://code.liqingyao.com/how-to-become-better-ios-developer/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
